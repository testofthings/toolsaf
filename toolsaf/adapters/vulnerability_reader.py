"""Read vulnerabilities from CSV-file"""

import csv
from io import BufferedReader, TextIOWrapper
from typing import cast

from tdsaf.core.components import Software
from tdsaf.core.event_interface import PropertyEvent, EventInterface
from tdsaf.core.model import IoTSystem, NodeComponent
from tdsaf.common.property import Properties, PropertyKey
from tdsaf.adapters.tools import NodeComponentTool
from tdsaf.common.traffic import EvidenceSource, Evidence
from tdsaf.common.verdict import Verdict


class VulnerabilityReader(NodeComponentTool):
    """Vulnerability-data CSV-file reader"""
    def __init__(self, system: IoTSystem) -> None:
        super().__init__("vulnz", ".csv", system)
        self.tool.name = "Vulnerability scan"

    def filter_component(self, component: NodeComponent) -> bool:
        """Filter checked entities"""
        return isinstance(component, Software)

    def process_component(self, component: NodeComponent, data_file: BufferedReader, interface: EventInterface,
                       source: EvidenceSource) -> None:
        software = cast(Software, component)
        evidence = Evidence(source)

        with TextIOWrapper(data_file) as f:
            reader = csv.reader(f, delimiter=",")
            properties = set()
            for n, row in enumerate(reader):
                if n == 0:
                    continue  # title
                name = row[0].strip()
                # ver = row[1].strip()
                cve = row[3].strip().lower()
                key = PropertyKey(self.tool_label, name, cve)
                properties.add(key)
                ev = PropertyEvent(evidence, software, key.verdict(Verdict.FAIL))
                interface.property_update(ev)

            ev = PropertyEvent(evidence, software, Properties.VULNERABILITIES.value_set(properties))
            interface.property_update(ev)
